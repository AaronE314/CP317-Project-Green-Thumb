PhotoReport:
+reportId (the ID of the PhotoReport)
+photoId (the ID of the reported Photo)
+reportUserId (the ID of the User who reported the Photo)
+adminId (the ID of the Admin assigned to review the PhotoReport)
+details (the details given by the User who reported the Photo)
+adminAction (enum of Unhandled|Rejected|Deleted|Retained, where Deleted indicates the Photo has been removed and Retained indicates the Photo is being hidden, but kept for some reason)
+handleDate (the date/time when the Admin handled the PhotoReport)
-handle(action) (only accessible to Admin)

Guest:
-idPhoto(photo) (upload and identify Photo with ML)
-plantSearch(params) (search the Plant DB)

User (inherits from Guest):
+userId (the ID of the User)
+strikes (number of times a Photo has been removed)
+banned (bool - true if User is banned)
+[photoIds] (the IDs of the User's posted Photos)
+[plantHistory] (the history of the User's viewed Plants)
-getHistory()
-deleteHistory()
-ban() (only accessible to Admin)

Admin (inherits from User):

Plant:
+plantId (the ID of the Plant)
+name (the name)
+bio (string)
+nativeArea (the native geographical location of the species)
+[specialInfo] (array of misc. special info)
+[colours] (colour variants of the species)
-postPhoto(photo) (post a new photo - only accessible to User and Admin)
-getPhotos(filter) (filter is an enum of ByDate|ByVote - ByVote is default)
-getTopPhoto() (get most popular photo for cases where only one is needed)

Photo:
+photoId (the ID of the Photo)
+plantId (the ID of the corresponding Plant)
+userId (the User that posted the Photo)
+uploadDate (the date/time when the Photo was uploaded)
+[upvoteIds] (the users who have upvoted the Photo)
+[downvoteIds] (the users who have downvoted the Photo)
-delete (only accessible to Admin)
-vote(up) (up is boolean - up == false is a downvote)
-report(details)
