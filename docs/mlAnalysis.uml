
MLIdentifier <<static>>:
+FILE_LOCATION (location of model file)
+scheduleTraining(dateTime) (schedule a retrain for a given date and time, will call reTrain at the appropreate time)
+reTrain() (instant call to retrain the network, will gather the proper images for training, preProcess the images, retrain, and load the new model)
+gatherImages(gather needed images for retraining)
+predict(image) (preProcesses the image, identify the image, and return the identification)
-preProcessImage(image) (pre process the image to fit it to the requirements of the network)
-loadNewModel(model) (will set the currently used identification model to the model given in the parameter)


Python:

MLTrainer <<static>>:
+FILE_LOCATION (location of model file)
+trainModel([training images], [labels]) (retrain the model with the given images and labels)
+saveModel() (save the model as a file)
+convertFormat() (will convert the format from tensorflow to tensorflow.js)
